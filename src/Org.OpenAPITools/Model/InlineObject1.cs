/* 
 * 直接模式
 *
 * 接入jugugu区块链全包的全部接口，访问IP需要连续管理员，添加业务服务器IP
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject1
    /// </summary>
    [DataContract]
    public partial class InlineObject1 :  IEquatable<InlineObject1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        /// <param name="phone">此处传参为空字符串 (required).</param>
        /// <param name="robotcodeid">robotcodeid (required).</param>
        /// <param name="robotcode">robotcode (required).</param>
        /// <param name="code">code (required).</param>
        /// <param name="paymentpassword">该密钥为用户进行链上交互使用，密钥设置长度&gt;9位，且包含0-1 A-B a-b 已经特殊字符[~!@#$%^&amp;*?_+;&#39;,./\\|·！￥（）{}：“《》？、，。；’”\&quot;《》…-]+ (required).</param>
        public InlineObject1(string phone = default(string), string robotcodeid = default(string), string robotcode = default(string), string code = default(string), string paymentpassword = default(string))
        {
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new InvalidDataException("phone is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.Phone = phone;
            }
            
            // to ensure "robotcodeid" is required (not null)
            if (robotcodeid == null)
            {
                throw new InvalidDataException("robotcodeid is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.Robotcodeid = robotcodeid;
            }
            
            // to ensure "robotcode" is required (not null)
            if (robotcode == null)
            {
                throw new InvalidDataException("robotcode is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.Robotcode = robotcode;
            }
            
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            
            // to ensure "paymentpassword" is required (not null)
            if (paymentpassword == null)
            {
                throw new InvalidDataException("paymentpassword is a required property for InlineObject1 and cannot be null");
            }
            else
            {
                this.Paymentpassword = paymentpassword;
            }
            
        }
        
        /// <summary>
        /// 此处传参为空字符串
        /// </summary>
        /// <value>此处传参为空字符串</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Robotcodeid
        /// </summary>
        [DataMember(Name="robotcodeid", EmitDefaultValue=false)]
        public string Robotcodeid { get; set; }

        /// <summary>
        /// Gets or Sets Robotcode
        /// </summary>
        [DataMember(Name="robotcode", EmitDefaultValue=false)]
        public string Robotcode { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// 该密钥为用户进行链上交互使用，密钥设置长度&gt;9位，且包含0-1 A-B a-b 已经特殊字符[~!@#$%^&amp;*?_+;&#39;,./\\|·！￥（）{}：“《》？、，。；’”\&quot;《》…-]+
        /// </summary>
        /// <value>该密钥为用户进行链上交互使用，密钥设置长度&gt;9位，且包含0-1 A-B a-b 已经特殊字符[~!@#$%^&amp;*?_+;&#39;,./\\|·！￥（）{}：“《》？、，。；’”\&quot;《》…-]+</value>
        [DataMember(Name="paymentpassword", EmitDefaultValue=false)]
        public string Paymentpassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject1 {\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Robotcodeid: ").Append(Robotcodeid).Append("\n");
            sb.Append("  Robotcode: ").Append(Robotcode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Paymentpassword: ").Append(Paymentpassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject1);
        }

        /// <summary>
        /// Returns true if InlineObject1 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Robotcodeid == input.Robotcodeid ||
                    (this.Robotcodeid != null &&
                    this.Robotcodeid.Equals(input.Robotcodeid))
                ) && 
                (
                    this.Robotcode == input.Robotcode ||
                    (this.Robotcode != null &&
                    this.Robotcode.Equals(input.Robotcode))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Paymentpassword == input.Paymentpassword ||
                    (this.Paymentpassword != null &&
                    this.Paymentpassword.Equals(input.Paymentpassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Robotcodeid != null)
                    hashCode = hashCode * 59 + this.Robotcodeid.GetHashCode();
                if (this.Robotcode != null)
                    hashCode = hashCode * 59 + this.Robotcode.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Paymentpassword != null)
                    hashCode = hashCode * 59 + this.Paymentpassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
